#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

insecure_registries=$(jq -r '.source.image.insecure_registries // [] | join(" ")' < $payload)

registry_mirror=$(jq -r '.source.image.registry_mirror // ""' < $payload)

username=$(jq -r '.source.image.username // ""' < $payload)
password=$(jq -r '.source.image.password // ""' < $payload)
repository="$(jq -r '.source.image.repository // ""' < $payload)"
tag="$(jq -r '.source.image.tag // "latest"' < $payload)"
ca_certs=$(jq -r '.source.image.ca_certs // []' < $payload)

export AWS_ACCESS_KEY_ID=$(jq -r '.source.image.aws_access_key_id // ""' < $payload)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.image.aws_secret_access_key // ""' < $payload)

if private_registry "${repository}" ; then
  registry="$(extract_registry "${repository}")"
else
  registry=
fi

digest="$(jq -r '.version.digest' < $payload)"

certs_to_file "$ca_certs"
start_docker "$insecure_registries" "$registry_mirror"

mkdir -p $destination

image_name="${repository}@${digest}"


log_in "$username" "$password" "$registry"

docker_pull "$image_name"

image_id="$(image_from_digest "$repository" "$digest")"

echo "$image_id" > ${destination}/image-id
docker inspect $image_id > ${destination}/docker_inspect.json

echo $payload | docker run \
  "$image_name" /opt/resource/in


echo "$repository" > ${destination}/repository
echo "$tag" > ${destination}/tag
echo "$digest" > ${destination}/digest

jq -n "{
  version: {
    digest: $(echo $digest | jq -R .)
  },
  metadata: [
    { name: \"image\", value: $(echo $image_id | head -c 12 | jq -R .) }
  ]
}" >&3
